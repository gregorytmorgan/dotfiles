Minimal git cheatsheet


View current config settings
===============================
git config --list

<<<<<<< HEAD
Set config settings
===============================
git config --global user.email me@nowhere.com

git config --global core.editor emacs
=======
Set global config settings
===============================
git config --global user.email nobody@nowhere.com

git config --global user.name "nobody"
>>>>>>> Update git settings to use anon email

Setup git to use the merge tool of choice
===============================
git config --global merge.tool kdiff3

Popular choices are meld and kdiff3

Create a repo
===============================
> git init

Cheakout a remote repo
===============================
> git clone git@somerepo.com ... there are a number of ways to do this base on the protocol and auth used

Create branch
===============================
> git branch mybranch

Change to a branch
===============================
> git checkout mybranch

Set the upstream link of a banch
===============================
> git checkout mybranch
> git banch -u [upstream branch], e.g. "git branch -u master"

Stash some work
===============================
> git stash save "mywork"

View the stash
===============================
> git stash list

Retrieve stashed work
===============================
> git stash pop

or

> git stash apply stash@{0} ... see "git stash list"

... and once the work is applied

> git stash drop stash@{0}

Show the current modified files etc
===============================
> git status

Show branches and upstream links
===============================
> git branch -vv

Show the current uncommitted/unstaged changes
===============================
> git diff

Show the current uncommitted/staged (to be commited) changes
===============================
> git diff --cached

or 

> git diff --staged (this is simply an alias)


Diff/Merge via GUI
===============================
> git difftool

or 

> git difftool --cached

Generally difftool takes the same arg as diff


Cleaning up work before pushing upstream (interactive rebase)
===============================
> git rebase -i

Cleaning up work when there isn't an upstream
===============================
> git rebase -i HEAD~7

This will allow squashing of multiple comments, delete/removal of commits, edit of messages, etc ... standard warnings about rebasing apply.

Commiting work
===============================
> git add myfile1
> git add myfile2
> git add myfile3
> git commit (a text editor will typically appear where you can enter a commit message)

or if you'd like to commit a small number of changed files

> git commit myfile1 myfile2 -m "my commit message"

Pushing work upstream
===============================
From the working branch
> git merge upstreambranch

Resolve any issues.

> git push upstreambranch

View commits
===============================
> git log 

or with more commit detail

> git log -p

or 

> git log --pretty=oneline ... good for search for a hash

Who changed what in a file
===============================
> git blame myfile

Revert changes to a file
===============================
> git checkout myfile

Find instances of a string
===============================
> git grep helloWorld

Show the details of a specific commit
===============================
> git show [hash] e.g. "git show c341f489fd691c20e8cf8e97a7206fd44f3b4efb" or "git show c341f4"

Command help
===============================
> git <command> -h

or

> git help <command>, basically just pulls up the man page














